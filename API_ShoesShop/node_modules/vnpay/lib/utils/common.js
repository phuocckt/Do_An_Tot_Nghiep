"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hash = exports.resolveUrlString = exports.getResponseByStatusCode = exports.generateRandomString = exports.isValidVnpayDateFormat = exports.parseDate = exports.dateFormat = exports.getDateInGMT7 = void 0;
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const response_map_constant_1 = require("../constants/response-map.constant");
const enums_1 = require("../enums");
const crypto_1 = __importDefault(require("crypto"));
function getDateInGMT7(date) {
    return (0, moment_timezone_1.default)(new Date()).tz('Asia/Ho_Chi_Minh').toDate();
}
exports.getDateInGMT7 = getDateInGMT7;
/**
 * Định dạng lại ngày theo định dạng của VNPay, mặc định là yyyyMMddHHmmss
 * @en Format date to VNPay format, default is yyyyMMddHHmmss
 *
 * @param date date to format
 * @param format format of date
 * @returns formatted date
 */
function dateFormat(date, format = 'yyyyMMddHHmmss') {
    const pad = (n) => (n < 10 ? `0${n}` : n).toString();
    const year = date.getFullYear();
    const month = pad(date.getMonth() + 1);
    const day = pad(date.getDate());
    const hour = pad(date.getHours());
    const minute = pad(date.getMinutes());
    const second = pad(date.getSeconds());
    return Number(format
        .replace('yyyy', year.toString())
        .replace('MM', month)
        .replace('dd', day)
        .replace('HH', hour)
        .replace('mm', minute)
        .replace('ss', second));
}
exports.dateFormat = dateFormat;
/**
 * Parse a vnpay date format number to date
 * @param dateNumber An vnpay date format number
 * @returns Date
 */
function parseDate(dateNumber) {
    const dateString = dateNumber.toString();
    const year = parseInt(dateString.slice(0, 4));
    const month = parseInt(dateString.slice(4, 6)) - 1; // months are 0-indexed in JavaScript
    const day = parseInt(dateString.slice(6, 8));
    const hour = parseInt(dateString.slice(8, 10));
    const minute = parseInt(dateString.slice(10, 12));
    const second = parseInt(dateString.slice(12, 14));
    return new Date(year, month, day, hour, minute, second);
}
exports.parseDate = parseDate;
/**
 * Validate if the date is match with format `yyyyMMddHHmmss` or not
 * @param date The date to be validated
 * @returns True if the date is valid, false otherwise
 */
function isValidVnpayDateFormat(date) {
    const dateString = date.toString();
    const regex = /^\d{4}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])([01][0-9]|2[0-3])[0-5][0-9][0-5][0-9]$/;
    return regex.test(dateString);
}
exports.isValidVnpayDateFormat = isValidVnpayDateFormat;
function generateRandomString(length, options) {
    let result = '';
    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    if (options === null || options === void 0 ? void 0 : options.onlyNumber) {
        characters = '0123456789';
    }
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        result += `${characters[(Math.random() * charactersLength) | 0]}`;
    }
    return result;
}
exports.generateRandomString = generateRandomString;
/**
 * Lấy thông tin response theo mã response
 * @en Get response message by response code
 *
 * @param responseCode response code from VNPay
 * @param locale locale of response text
 * @param responseMap map of response code and response text if you want to custom
 * @returns message of response code
 */
function getResponseByStatusCode(responseCode = '', locale = enums_1.VnpLocale.VN, responseMap = response_map_constant_1.RESPONSE_MAP) {
    var _a;
    const respondText = (_a = responseMap.get(responseCode)) !== null && _a !== void 0 ? _a : responseMap.get('default');
    return respondText[locale];
}
exports.getResponseByStatusCode = getResponseByStatusCode;
function resolveUrlString(host, path) {
    host = host.trim();
    path = path.trim();
    while (host.endsWith('/') || host.endsWith('\\')) {
        host = host.slice(0, -1);
    }
    while (path.startsWith('/') || path.startsWith('\\')) {
        path = path.slice(1);
    }
    return `${host}/${path}`;
}
exports.resolveUrlString = resolveUrlString;
function hash(secret, data, algorithm) {
    return crypto_1.default.createHmac(algorithm, secret).update(data).digest('hex');
}
exports.hash = hash;
